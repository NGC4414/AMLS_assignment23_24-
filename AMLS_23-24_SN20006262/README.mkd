This Github page contains the code for the 2023-2024 AMLS assignment. The assignment requres to classify two medical images datasets, PneumoniaMNIST (binary classification) and PathMNIST(multi-class classification).

The project folder is organised as follows:
-`AMLS_23-24_SN20006262`
  - `Folder A` : contains the code to execute task A and the pretrained CNN model `pretrained_model.h5`
  - `Folder B` : contains the code to execute task B and the pretrained CNN models `vgg_no_aug_crossentropy.h5`, `vgg_no_aug_focal_loss.h5`, `vgg_with_aug_crossentropy.h5`,`vgg_with_aug_focal_loss.h5` 
  - `Datasets`: this folder is basically empty, however it comes with a .gitignore file that allows us to upload the empty folder to GitHub (it should be filled with PathMNIST.npz and PneumoniaMNIST.npz files)
  - `main.py`: file that handles the execution of the code
  - `README.mkd`: this file.


# Folder A: PneumoniaMNIST Binary-classification task

## Folder files
- `task_A.py`: file used to run the menu for task A
- `train_and_test_A.py`: file that contains all the functions that execute task A
- `__init__.py`: file used in order to accept relative paths
- `pretrained_model.h5`: pretrained CNN model

## Menu
Select models for Task A:
1. Logistic Regression
2. SVM without PCA
3. SVM with PCA
4. Train Convolutional Neural Network (CNN)
5. Use Pre-Trained Convolutional Neural Network (CNN)
6. Exit program


## Packages Required
- `numpy`: For numerical computations.
- `matplotlib`: For plotting graphs and images.
- `seaborn`: For advanced data visualisation.
- `keras`: For building and training neural network models.
- `tensorflow`: Backend for Keras and general ML tasks.
- `scikit-learn`: For machine learning models like SVM and Logistic Regression, preprocessing, and evaluation metrics.
- `sys`: For running the main and task_B.py
- `os`: For running the main and task_B.py



# Folder B: PathMNIST Multi-classification task

## Folder files
- `task_B.py`: file used to run the menu for task B
- `train_and_test_B.py`: file that contains all the functions that execute task B
- `__init__.py`: file used in order to accept relative paths
- `vgg_no_aug_crossentropy.h5`, `vgg_no_aug_focal_loss.h5`, `vgg_with_aug_crossentropy.h5`,`vgg_with_aug_focal_loss.h5`: pretrained CNN models for task B 

## Menu
Select models for Task B:
1. Train simplified VGG without Data Augmentation (focal loss)
2. Train simplified VGG with Data Augmentation (focal loss)
3. Train simplified VGG without Data Augmentation (categorical cross entropy)
4. Train simplified VGG with Data Augmentation (categorical cross entropy)
5. Use Pre-Trained simplified VGG without Data Augmentation (focal loss)
6. Use Pre-Trained simplified VGG with Data Augmentation (focal loss)
7. Use Pre-Trained simplified VGG without Data Augmentation (categorical cross entropy)
8. Use Pre-Trained simplified VGG with Data Augmentation (categorical cross entropy)
9. Exit program

## Packages Required
- `numpy`: For numerical computations.
- `seaborn`: For advanced data visualisation.
- `matplotlib`: For plotting graphs and images.
- `keras`: For building and training neural network models.
- `tensorflow`: Backend for Keras and general ML tasks.
- `scikit-learn`: For preprocessing and evaluation metrics.
- `sys`: For running the main and task_B.py
- `os`: For running the main and task_B.py



## How to Run
1. Ensure all the required packages are installed.
2. Download the PneumoniaMNIST.npz and the PathMNIST files from https://zenodo.org/records/6496656 and place them in the 'Datasets' folder.
3. To run task A write the `python main.py A` command in the terminal. To run task B write the command `python main.py B` on the terminal. The arguments `A` for `python main.py A` and `B` for `python main.py B` must be uppercase to make the program work.
4. Once the preferred task has been selected, follow the on-screen prompts to train new models or use pre-trained models for both tasks.




